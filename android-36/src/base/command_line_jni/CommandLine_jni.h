// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.base.CommandLine

#ifndef android_net_connectivity_org_chromium_base_CommandLine_JNI
#define android_net_connectivity_org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitch(JNIEnv* env, std::string& switchString);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MtAJxOnD(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  JNI_CommandLine_AppendSwitch(env, switchString_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitchWithValue(
    JNIEnv* env,
    std::string& switchString,
    std::string& value);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MNKGeq4d(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString,
    jobject value) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  std::string value_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, value));
  JNI_CommandLine_AppendSwitchWithValue(env, switchString_converted, value_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_AppendSwitchesAndArguments(
    JNIEnv* env,
    std::vector<std::string>& array);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MRGgm0Xm(
    JNIEnv* env,
    jclass jcaller,
    jobject array) {
  std::vector<std::string> array_converted = jni_zero::FromJniArray<std::vector<std::string>>(
      env,
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(array)));
  JNI_CommandLine_AppendSwitchesAndArguments(env, array_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static std::string JNI_CommandLine_GetSwitchValue(JNIEnv* env, std::string& switchString);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_android_net_connectivity_J_N_MpKDqvJc(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  auto _ret = JNI_CommandLine_GetSwitchValue(env, switchString_converted);
  jobject converted_ret = jni_zero::ToJniType(env, _ret).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static std::vector<std::string> JNI_CommandLine_GetSwitchesFlattened(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_android_net_connectivity_J_N_M0RvGqaj(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_CommandLine_GetSwitchesFlattened(env);
  jobject converted_ret = jni_zero::ToJniArray(env, _ret, jni_zero::g_string_class).Release();
  return converted_ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_CommandLine_HasSwitch(JNIEnv* env, std::string& switchString);

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MPiiSiez(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  auto _ret = JNI_CommandLine_HasSwitch(env, switchString_converted);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_Init(JNIEnv* env, std::vector<std::string>& args);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mp_1Bf7qr(
    JNIEnv* env,
    jclass jcaller,
    jobject args) {
  std::vector<std::string> args_converted = jni_zero::FromJniArray<std::vector<std::string>>(
      env,
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(args)));
  JNI_CommandLine_Init(env, args_converted);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CommandLine_RemoveSwitch(JNIEnv* env, std::string& switchString);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MrLIIZN_1(
    JNIEnv* env,
    jclass jcaller,
    jobject switchString) {
  std::string switchString_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, switchString));
  JNI_CommandLine_RemoveSwitch(env, switchString_converted);
}



#endif  // android_net_connectivity_org_chromium_base_CommandLine_JNI
