// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.base.EarlyTraceEvent

#ifndef android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI
#define android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz_defined
#define android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.base.EarlyTraceEvent";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace base::android {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong id,
    jlong timeNanos);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mhdyh0WN(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong id,
    jlong timeNanos) {
  JNI_EarlyTraceEvent_RecordEarlyAsyncBeginEvent(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      id,
      timeNanos);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(JNIEnv* env, jlong id, jlong timeNanos);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MmH1F_1vE(
    JNIEnv* env,
    jclass jcaller,
    jlong id,
    jlong timeNanos) {
  JNI_EarlyTraceEvent_RecordEarlyAsyncEndEvent(env, id, timeNanos);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyBeginEvent(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MaQDSkvN(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  JNI_EarlyTraceEvent_RecordEarlyBeginEvent(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      timeNanos,
      threadId,
      threadMillis);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyEndEvent(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MdiVY7jZ(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  JNI_EarlyTraceEvent_RecordEarlyEndEvent(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      timeNanos,
      threadId,
      threadMillis);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MvrncgGn(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  JNI_EarlyTraceEvent_RecordEarlyToplevelBeginEvent(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      timeNanos,
      threadId,
      threadMillis);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MubkdyjU(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong timeNanos,
    jint threadId,
    jlong threadMillis) {
  JNI_EarlyTraceEvent_RecordEarlyToplevelEndEvent(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      timeNanos,
      threadId,
      threadMillis);
}


// Native to Java functions
static jboolean Java_EarlyTraceEvent_getBackgroundStartupTracingFlag(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getBackgroundStartupTracingFlag",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}

static void Java_EarlyTraceEvent_setBackgroundStartupTracingFlag(JNIEnv* env, jboolean enabled) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_EarlyTraceEvent_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "setBackgroundStartupTracingFlag",
      "(Z)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), enabled);
}



}  // namespace base::android

#endif  // android_net_connectivity_org_chromium_base_EarlyTraceEvent_JNI
