// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.base.MemoryPressureListener

#ifndef android_net_connectivity_org_chromium_base_MemoryPressureListener_JNI
#define android_net_connectivity_org_chromium_base_MemoryPressureListener_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_base_MemoryPressureListener_clazz_defined
#define android_net_connectivity_org_chromium_base_MemoryPressureListener_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_MemoryPressureListener_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.base.MemoryPressureListener";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jboolean JNI_MemoryPressureListener_IsTrimMemoryBackgroundCritical(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MPWvQRWC(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_MemoryPressureListener_IsTrimMemoryBackgroundCritical(env);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_MemoryPressureListener_OnMemoryPressure(JNIEnv* env, jint pressure);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MnsLrJNb(
    JNIEnv* env,
    jclass jcaller,
    jint pressure) {
  JNI_MemoryPressureListener_OnMemoryPressure(env, pressure);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_MemoryPressureListener_OnPreFreeze(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MZQha2qJ(
    JNIEnv* env,
    jclass jcaller) {
  JNI_MemoryPressureListener_OnPreFreeze(env);
}


// Native to Java functions
static void Java_MemoryPressureListener_addNativeCallback(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_MemoryPressureListener_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "addNativeCallback",
      "()V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id());
}



#endif  // android_net_connectivity_org_chromium_base_MemoryPressureListener_JNI
