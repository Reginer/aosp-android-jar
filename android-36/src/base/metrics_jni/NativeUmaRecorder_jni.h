// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.base.metrics.NativeUmaRecorder

#ifndef android_net_connectivity_org_chromium_base_metrics_NativeUmaRecorder_JNI
#define android_net_connectivity_org_chromium_base_metrics_NativeUmaRecorder_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"
namespace base::android {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_AddActionCallbackForTesting(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& callback);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MKu5opmB_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject callback) {
  auto _ret = JNI_NativeUmaRecorder_AddActionCallbackForTesting(
      env,
      jni_zero::JavaParamRef<jobject>(env, callback));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_CreateHistogramSnapshotForTesting(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MEvjgs_00024z_1ForTesting(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_NativeUmaRecorder_CreateHistogramSnapshotForTesting(env);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_NativeUmaRecorder_DestroyHistogramSnapshotForTesting(
    JNIEnv* env,
    jlong snapshotPtr);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Ms_00024kNROT_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong snapshotPtr) {
  JNI_NativeUmaRecorder_DestroyHistogramSnapshotForTesting(env, snapshotPtr);
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jlongArray> JNI_NativeUmaRecorder_GetHistogramSamplesForTesting(
    JNIEnv* env,
    std::string& name);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_android_net_connectivity_J_N_MG7Fp_1PX_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject name) {
  std::string name_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, name));
  auto _ret = JNI_NativeUmaRecorder_GetHistogramSamplesForTesting(env, name_converted);
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_NativeUmaRecorder_GetHistogramTotalCountForTesting(
    JNIEnv* env,
    std::string& name,
    jlong snapshotPtr);

JNI_ZERO_BOUNDARY_EXPORT jint Java_android_net_connectivity_J_N_MAEQJXoB_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong snapshotPtr) {
  std::string name_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, name));
  auto _ret = JNI_NativeUmaRecorder_GetHistogramTotalCountForTesting(
      env,
      name_converted,
      snapshotPtr);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jint JNI_NativeUmaRecorder_GetHistogramValueCountForTesting(
    JNIEnv* env,
    std::string& name,
    jint sample,
    jlong snapshotPtr);

JNI_ZERO_BOUNDARY_EXPORT jint Java_android_net_connectivity_J_N_MK_1v14VX_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jint sample,
    jlong snapshotPtr) {
  std::string name_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, name));
  auto _ret = JNI_NativeUmaRecorder_GetHistogramValueCountForTesting(
      env,
      name_converted,
      sample,
      snapshotPtr);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_RecordBooleanHistogram(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jboolean sample);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MzWzwuwB(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong nativeHint,
    jboolean sample) {
  auto _ret = JNI_NativeUmaRecorder_RecordBooleanHistogram(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      nativeHint,
      sample);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_RecordExponentialHistogram(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MuJ4GoFy(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  auto _ret = JNI_NativeUmaRecorder_RecordExponentialHistogram(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      nativeHint,
      sample,
      min,
      max,
      numBuckets);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_RecordLinearHistogram(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_M1BeiK0T(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong nativeHint,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  auto _ret = JNI_NativeUmaRecorder_RecordLinearHistogram(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      nativeHint,
      sample,
      min,
      max,
      numBuckets);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_NativeUmaRecorder_RecordSparseHistogram(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& name,
    jlong nativeHint,
    jint sample);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MYt28aIK(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong nativeHint,
    jint sample) {
  auto _ret = JNI_NativeUmaRecorder_RecordSparseHistogram(
      env,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      nativeHint,
      sample);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_NativeUmaRecorder_RecordUserAction(
    JNIEnv* env,
    std::string& name,
    jlong millisSinceEvent);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MiZ3fGIS(
    JNIEnv* env,
    jclass jcaller,
    jobject name,
    jlong millisSinceEvent) {
  std::string name_converted = jni_zero::FromJniType<std::string>(
      env,
      jni_zero::JavaParamRef<jobject>(env, name));
  JNI_NativeUmaRecorder_RecordUserAction(env, name_converted, millisSinceEvent);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_NativeUmaRecorder_RemoveActionCallbackForTesting(JNIEnv* env, jlong callbackId);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MQ6A3Yuy_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong callbackId) {
  JNI_NativeUmaRecorder_RemoveActionCallbackForTesting(env, callbackId);
}



}  // namespace base::android

#endif  // android_net_connectivity_org_chromium_base_metrics_NativeUmaRecorder_JNI
