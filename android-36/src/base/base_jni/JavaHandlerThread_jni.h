// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.base.JavaHandlerThread

#ifndef android_net_connectivity_org_chromium_base_JavaHandlerThread_JNI
#define android_net_connectivity_org_chromium_base_JavaHandlerThread_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz_defined
#define android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz_defined
inline jclass android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.base.JavaHandlerThread";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace base::android {

// Java to native functions
JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M_1Z7ceOr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread,
    jlong nativeEvent) {
  reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread)->InitializeThread(
      env,
      nativeEvent);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MHuj_1tLF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeJavaHandlerThread) {
  reinterpret_cast<JavaHandlerThread*>(nativeJavaHandlerThread)->OnLooperStopped(env);
}


// Native to Java functions
static jni_zero::ScopedJavaLocalRef<jobject> Java_JavaHandlerThread_create(
    JNIEnv* env,
    const char* const& name,
    JniIntWrapper priority) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "create",
      "(Ljava/lang/String;I)Landroid/net/connectivity/org/chromium/base/JavaHandlerThread;",
      &cached_method_id);
  jni_zero::ScopedJavaLocalRef<jobject> converted_name = jni_zero::ToJniType(env, name);
  auto _ret = env->CallStaticObjectMethod(
      clazz,
      call_context.method_id(),
      converted_name.obj(),
      as_jint(priority));
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

static jni_zero::ScopedJavaLocalRef<jthrowable> Java_JavaHandlerThread_getUncaughtExceptionIfAny(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "getUncaughtExceptionIfAny",
      "()Ljava/lang/Throwable;",
      &cached_method_id);
  auto _ret = env->CallObjectMethod(obj.obj(), call_context.method_id());
  jthrowable _ret2 = static_cast<jthrowable>(_ret);
  return jni_zero::ScopedJavaLocalRef<jthrowable>(env, _ret2);
}

static jboolean Java_JavaHandlerThread_isAlive(JNIEnv* env, const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "isAlive",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallBooleanMethod(obj.obj(), call_context.method_id());
  return _ret;
}

static void Java_JavaHandlerThread_joinThread(JNIEnv* env, const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "joinThread",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_JavaHandlerThread_listenForUncaughtExceptionsForTesting(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "listenForUncaughtExceptionsForTesting",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_JavaHandlerThread_quitThreadSafely(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jlong nativeThread) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "quitThreadSafely",
      "(J)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), nativeThread);
}

static void Java_JavaHandlerThread_startAndInitialize(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jlong nativeThread,
    jlong nativeEvent) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_base_JavaHandlerThread_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "startAndInitialize",
      "(JJ)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), nativeThread, nativeEvent);
}



}  // namespace base::android

#endif  // android_net_connectivity_org_chromium_base_JavaHandlerThread_JNI
