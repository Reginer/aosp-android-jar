// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.impl.CronetUrlRequest

#ifndef android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.impl.CronetUrlRequest";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace cronet {

// Java to native functions
JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MSjljk0f(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject name,
    jobject value) {
  auto _ret = reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->AddRequestHeader(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(name)),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(value)));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUrlRequest_CreateRequestAdapter(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& caller,
    jlong urlRequestContextAdapter,
    const jni_zero::JavaParamRef<jstring>& url,
    jint priority,
    jboolean disableCache,
    jboolean disableConnectionMigration,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jint idempotency,
    const jni_zero::JavaParamRef<jbyteArray>& dictionarySha256Hash,
    const jni_zero::JavaParamRef<jobject>& dictionary,
    jint dictionaryPosition,
    jint dictionaryCapacity,
    const jni_zero::JavaParamRef<jstring>& dictionaryId,
    jlong networkHandle);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MFGBnxaV(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestContextAdapter,
    jobject url,
    jint priority,
    jboolean disableCache,
    jboolean disableConnectionMigration,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jint idempotency,
    jobject dictionarySha256Hash,
    jobject dictionary,
    jint dictionaryPosition,
    jint dictionaryCapacity,
    jobject dictionaryId,
    jlong networkHandle) {
  auto _ret = JNI_CronetUrlRequest_CreateRequestAdapter(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      urlRequestContextAdapter,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(url)),
      priority,
      disableCache,
      disableConnectionMigration,
      trafficStatsTagSet,
      trafficStatsTag,
      trafficStatsUidSet,
      trafficStatsUid,
      idempotency,
      jni_zero::JavaParamRef<jbyteArray>(env, static_cast<jbyteArray>(dictionarySha256Hash)),
      jni_zero::JavaParamRef<jobject>(env, dictionary),
      dictionaryPosition,
      dictionaryCapacity,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(dictionaryId)),
      networkHandle);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mfotd4Ob(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean sendOnCanceled) {
  reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->Destroy(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      sendOnCanceled);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MSplFy9_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->FollowDeferredRedirect(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MVbDDTbK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject listener) {
  reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->GetStatus(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jobject>(env, listener));
}

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MjZZaeHU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject byteBuffer,
    jint position,
    jint capacity) {
  auto _ret = reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->ReadData(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jobject>(env, byteBuffer),
      position,
      capacity);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MdjgNOi3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject method) {
  auto _ret = reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->SetHttpMethod(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(method)));
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mw8upc4T(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetURLRequestAdapter*>(nativePtr)->Start(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}


// Native to Java functions
static void Java_CronetUrlRequest_onCanceled(JNIEnv* env, const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onCanceled",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_CronetUrlRequest_onError(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper errorCode,
    JniIntWrapper nativeError,
    JniIntWrapper nativeQuicError,
    JniIntWrapper source,
    const jni_zero::JavaRef<jstring>& errorString,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onError",
      "(IIIILjava/lang/String;J)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(errorCode),
      as_jint(nativeError),
      as_jint(nativeQuicError),
      as_jint(source),
      errorString.obj(),
      receivedByteCount);
}

static void Java_CronetUrlRequest_onMetricsCollected(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jlong requestStartMs,
    jlong dnsStartMs,
    jlong dnsEndMs,
    jlong connectStartMs,
    jlong connectEndMs,
    jlong sslStartMs,
    jlong sslEndMs,
    jlong sendingStartMs,
    jlong sendingEndMs,
    jlong pushStartMs,
    jlong pushEndMs,
    jlong responseStartMs,
    jlong requestEndMs,
    jboolean socketReused,
    jlong sentByteCount,
    jlong receivedByteCount,
    jboolean quicConnectionMigrationAttempted,
    jboolean quicConnectionMigrationSuccessful) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onMetricsCollected",
      "(JJJJJJJJJJJJJZJJZZ)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      requestStartMs,
      dnsStartMs,
      dnsEndMs,
      connectStartMs,
      connectEndMs,
      sslStartMs,
      sslEndMs,
      sendingStartMs,
      sendingEndMs,
      pushStartMs,
      pushEndMs,
      responseStartMs,
      requestEndMs,
      socketReused,
      sentByteCount,
      receivedByteCount,
      quicConnectionMigrationAttempted,
      quicConnectionMigrationSuccessful);
}

static void Java_CronetUrlRequest_onNativeAdapterDestroyed(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onNativeAdapterDestroyed",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_CronetUrlRequest_onReadCompleted(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& byteBuffer,
    JniIntWrapper bytesRead,
    JniIntWrapper initialPosition,
    JniIntWrapper initialLimit,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onReadCompleted",
      "(Ljava/nio/ByteBuffer;IIIJ)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      byteBuffer.obj(),
      as_jint(bytesRead),
      as_jint(initialPosition),
      as_jint(initialLimit),
      receivedByteCount);
}

static void Java_CronetUrlRequest_onRedirectReceived(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jstring>& newLocation,
    JniIntWrapper httpStatusCode,
    const jni_zero::JavaRef<jstring>& httpStatusText,
    const jni_zero::JavaRef<jobjectArray>& headers,
    jboolean wasCached,
    const jni_zero::JavaRef<jstring>& negotiatedProtocol,
    const jni_zero::JavaRef<jstring>& proxyServer,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onRedirectReceived",
      "(Ljava/lang/String;ILjava/lang/String;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;J)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      newLocation.obj(),
      as_jint(httpStatusCode),
      httpStatusText.obj(),
      headers.obj(),
      wasCached,
      negotiatedProtocol.obj(),
      proxyServer.obj(),
      receivedByteCount);
}

static void Java_CronetUrlRequest_onResponseStarted(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper httpStatusCode,
    const jni_zero::JavaRef<jstring>& httpStatusText,
    const jni_zero::JavaRef<jobjectArray>& headers,
    jboolean wasCached,
    const jni_zero::JavaRef<jstring>& negotiatedProtocol,
    const jni_zero::JavaRef<jstring>& proxyServer,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onResponseStarted",
      "(ILjava/lang/String;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;J)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(httpStatusCode),
      httpStatusText.obj(),
      headers.obj(),
      wasCached,
      negotiatedProtocol.obj(),
      proxyServer.obj(),
      receivedByteCount);
}

static void Java_CronetUrlRequest_onStatus(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& listener,
    JniIntWrapper loadState) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onStatus",
      "(Landroid/net/connectivity/org/chromium/net/impl/VersionSafeCallbacks$UrlRequestStatusListener;I)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), listener.obj(), as_jint(loadState));
}

static void Java_CronetUrlRequest_onSucceeded(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onSucceeded",
      "(J)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), receivedByteCount);
}



}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetUrlRequest_JNI
