// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.impl.CronetLibraryLoader

#ifndef android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.impl.CronetLibraryLoader";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace cronet {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_CronetLibraryLoader_CronetInitOnInitThread(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MJyiCQCu(
    JNIEnv* env,
    jclass jcaller) {
  JNI_CronetLibraryLoader_CronetInitOnInitThread(env);
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jstring> JNI_CronetLibraryLoader_GetCronetVersion(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_android_net_connectivity_J_N_Mo_1Vqdle(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_CronetLibraryLoader_GetCronetVersion(env);
  return _ret.ReleaseLocal();
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CronetLibraryLoader_NativeInit(JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M8G_000243n3H(
    JNIEnv* env,
    jclass jcaller) {
  JNI_CronetLibraryLoader_NativeInit(env);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CronetLibraryLoader_SetMinLogLevel(JNIEnv* env, jint loggingLevel);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MdZpiqDR(
    JNIEnv* env,
    jclass jcaller,
    jint loggingLevel) {
  JNI_CronetLibraryLoader_SetMinLogLevel(env, loggingLevel);
}


// Native to Java functions
static void Java_CronetLibraryLoader_ensureInitializedFromNative(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "ensureInitializedFromNative",
      "()V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id());
}

static jni_zero::ScopedJavaLocalRef<jbyteArray> Java_CronetLibraryLoader_getBaseFeatureOverrides(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getBaseFeatureOverrides",
      "()[B",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  jbyteArray _ret2 = static_cast<jbyteArray>(_ret);
  return jni_zero::ScopedJavaLocalRef<jbyteArray>(env, _ret2);
}

static jni_zero::ScopedJavaLocalRef<jstring> Java_CronetLibraryLoader_getDefaultUserAgent(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getDefaultUserAgent",
      "()Ljava/lang/String;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  jstring _ret2 = static_cast<jstring>(_ret);
  return jni_zero::ScopedJavaLocalRef<jstring>(env, _ret2);
}

static void Java_CronetLibraryLoader_setNetworkThreadPriorityOnNetworkThread(
    JNIEnv* env,
    JniIntWrapper priority) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "setNetworkThreadPriorityOnNetworkThread",
      "(I)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), as_jint(priority));
}



}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetLibraryLoader_JNI
