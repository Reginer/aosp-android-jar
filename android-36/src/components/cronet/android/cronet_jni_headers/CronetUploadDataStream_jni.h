// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.impl.CronetUploadDataStream

#ifndef android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.impl.CronetUploadDataStream";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace cronet {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUploadDataStream_AttachUploadDataToRequest(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& caller,
    jlong urlRequestAdapter,
    jlong length);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MWTaR_00024k2(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestAdapter,
    jlong length) {
  auto _ret = JNI_CronetUploadDataStream_AttachUploadDataToRequest(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      urlRequestAdapter,
      length);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUploadDataStream_CreateAdapterForTesting(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& caller);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_Mp2IXjpG_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  auto _ret = JNI_CronetUploadDataStream_CreateAdapterForTesting(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUploadDataStream_CreateUploadDataStreamForTesting(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& caller,
    jlong length,
    jlong adapter);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_Mg_1bd8Ro_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong length,
    jlong adapter) {
  auto _ret = JNI_CronetUploadDataStream_CreateUploadDataStreamForTesting(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      length,
      adapter);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MYiWO19g(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr) {
  reinterpret_cast<CronetUploadDataStreamAdapter*>(nativePtr)->Destroy(env);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MbUU7LW2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jint bytesRead,
    jboolean finalChunk) {
  reinterpret_cast<CronetUploadDataStreamAdapter*>(nativePtr)->OnReadSucceeded(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      bytesRead,
      finalChunk);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MzjkTAnn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetUploadDataStreamAdapter*>(nativePtr)->OnRewindSucceeded(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}


// Native to Java functions
static void Java_CronetUploadDataStream_onUploadDataStreamDestroyed(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onUploadDataStreamDestroyed",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_CronetUploadDataStream_readData(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& byteBuffer) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "readData",
      "(Ljava/nio/ByteBuffer;)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), byteBuffer.obj());
}

static void Java_CronetUploadDataStream_rewind(JNIEnv* env, const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "rewind",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}



}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetUploadDataStream_JNI
