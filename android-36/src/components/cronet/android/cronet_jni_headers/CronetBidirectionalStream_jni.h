// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.impl.CronetBidirectionalStream

#ifndef android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.impl.CronetBidirectionalStream";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace cronet {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetBidirectionalStream_CreateBidirectionalStream(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& caller,
    jlong urlRequestContextAdapter,
    jboolean sendRequestHeadersAutomatically,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jlong networkHandle);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MmcHPrML(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jlong urlRequestContextAdapter,
    jboolean sendRequestHeadersAutomatically,
    jboolean trafficStatsTagSet,
    jint trafficStatsTag,
    jboolean trafficStatsUidSet,
    jint trafficStatsUid,
    jlong networkHandle) {
  auto _ret = JNI_CronetBidirectionalStream_CreateBidirectionalStream(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      urlRequestContextAdapter,
      sendRequestHeadersAutomatically,
      trafficStatsTagSet,
      trafficStatsTag,
      trafficStatsUidSet,
      trafficStatsUid,
      networkHandle);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MfKLon3Z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean sendOnCanceled) {
  reinterpret_cast<CronetBidirectionalStreamAdapter*>(nativePtr)->Destroy(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      sendOnCanceled);
}

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_Mii781MA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject byteBuffer,
    jint position,
    jint limit) {
  auto _ret = reinterpret_cast<CronetBidirectionalStreamAdapter*>(nativePtr)->ReadData(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jobject>(env, byteBuffer),
      position,
      limit);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Ml_00024I_00024FoI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetBidirectionalStreamAdapter*>(nativePtr)->SendRequestHeaders(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}

JNI_ZERO_BOUNDARY_EXPORT jint Java_android_net_connectivity_J_N_MtMMqY08(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject url,
    jint priority,
    jobject method,
    jobject headers,
    jboolean endOfStream) {
  auto _ret = reinterpret_cast<CronetBidirectionalStreamAdapter*>(nativePtr)->Start(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(url)),
      priority,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(method)),
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(headers)),
      endOfStream);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MRxvUykw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject buffers,
    jobject positions,
    jobject limits,
    jboolean endOfStream) {
  auto _ret = reinterpret_cast<CronetBidirectionalStreamAdapter*>(nativePtr)->WritevData(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(buffers)),
      jni_zero::JavaParamRef<jintArray>(env, static_cast<jintArray>(positions)),
      jni_zero::JavaParamRef<jintArray>(env, static_cast<jintArray>(limits)),
      endOfStream);
  return _ret;
}


// Native to Java functions
static void Java_CronetBidirectionalStream_onCanceled(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onCanceled",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_CronetBidirectionalStream_onError(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper errorCode,
    JniIntWrapper nativeError,
    JniIntWrapper nativeQuicError,
    JniIntWrapper source,
    const jni_zero::JavaRef<jstring>& errorString,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onError",
      "(IIIILjava/lang/String;J)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(errorCode),
      as_jint(nativeError),
      as_jint(nativeQuicError),
      as_jint(source),
      errorString.obj(),
      receivedByteCount);
}

static void Java_CronetBidirectionalStream_onMetricsCollected(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jlong requestStartMs,
    jlong dnsStartMs,
    jlong dnsEndMs,
    jlong connectStartMs,
    jlong connectEndMs,
    jlong sslStartMs,
    jlong sslEndMs,
    jlong sendingStartMs,
    jlong sendingEndMs,
    jlong pushStartMs,
    jlong pushEndMs,
    jlong responseStartMs,
    jlong requestEndMs,
    jboolean socketReused,
    jlong sentByteCount,
    jlong receivedByteCount,
    jboolean quicConnectionMigrationAttempted,
    jboolean quicConnectionMigrationSuccessful) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onMetricsCollected",
      "(JJJJJJJJJJJJJZJJZZ)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      requestStartMs,
      dnsStartMs,
      dnsEndMs,
      connectStartMs,
      connectEndMs,
      sslStartMs,
      sslEndMs,
      sendingStartMs,
      sendingEndMs,
      pushStartMs,
      pushEndMs,
      responseStartMs,
      requestEndMs,
      socketReused,
      sentByteCount,
      receivedByteCount,
      quicConnectionMigrationAttempted,
      quicConnectionMigrationSuccessful);
}

static void Java_CronetBidirectionalStream_onReadCompleted(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobject>& byteBuffer,
    JniIntWrapper bytesRead,
    JniIntWrapper initialPosition,
    JniIntWrapper initialLimit,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onReadCompleted",
      "(Ljava/nio/ByteBuffer;IIIJ)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      byteBuffer.obj(),
      as_jint(bytesRead),
      as_jint(initialPosition),
      as_jint(initialLimit),
      receivedByteCount);
}

static void Java_CronetBidirectionalStream_onResponseHeadersReceived(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper httpStatusCode,
    const jni_zero::JavaRef<jstring>& negotiatedProtocol,
    const jni_zero::JavaRef<jobjectArray>& headers,
    jlong receivedByteCount) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onResponseHeadersReceived",
      "(ILjava/lang/String;[Ljava/lang/String;J)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(httpStatusCode),
      negotiatedProtocol.obj(),
      headers.obj(),
      receivedByteCount);
}

static void Java_CronetBidirectionalStream_onResponseTrailersReceived(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobjectArray>& trailers) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onResponseTrailersReceived",
      "([Ljava/lang/String;)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), trailers.obj());
}

static void Java_CronetBidirectionalStream_onStreamReady(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    jboolean requestHeadersSent) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onStreamReady",
      "(Z)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), requestHeadersSent);
}

static void Java_CronetBidirectionalStream_onWritevCompleted(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    const jni_zero::JavaRef<jobjectArray>& byteBuffers,
    const jni_zero::JavaRef<jintArray>& initialPositions,
    const jni_zero::JavaRef<jintArray>& initialLimits,
    jboolean endOfStream) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onWritevCompleted",
      "([Ljava/nio/ByteBuffer;[I[IZ)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      byteBuffers.obj(),
      initialPositions.obj(),
      initialLimits.obj(),
      endOfStream);
}



}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetBidirectionalStream_JNI
