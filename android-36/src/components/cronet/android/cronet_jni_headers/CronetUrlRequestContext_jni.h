// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.impl.CronetUrlRequestContext

#ifndef android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_JNI
#define android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz_defined
#define android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.impl.CronetUrlRequestContext";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


namespace cronet {

// Java to native functions
// Forward declaration. To be implemented by the including .cc file.
static void JNI_CronetUrlRequestContext_AddPkp(
    JNIEnv* env,
    jlong urlRequestContextConfig,
    const jni_zero::JavaParamRef<jstring>& host,
    const jni_zero::JavaParamRef<jobjectArray>& hashes,
    jboolean includeSubdomains,
    jlong expirationTime);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MB198bG8(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig,
    jobject host,
    jobject hashes,
    jboolean includeSubdomains,
    jlong expirationTime) {
  JNI_CronetUrlRequestContext_AddPkp(
      env,
      urlRequestContextConfig,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(host)),
      jni_zero::JavaParamRef<jobjectArray>(env, static_cast<jobjectArray>(hashes)),
      includeSubdomains,
      expirationTime);
}

// Forward declaration. To be implemented by the including .cc file.
static void JNI_CronetUrlRequestContext_AddQuicHint(
    JNIEnv* env,
    jlong urlRequestContextConfig,
    const jni_zero::JavaParamRef<jstring>& host,
    jint port,
    jint alternatePort);

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M2KdtUrg(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig,
    jobject host,
    jint port,
    jint alternatePort) {
  JNI_CronetUrlRequestContext_AddQuicHint(
      env,
      urlRequestContextConfig,
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(host)),
      port,
      alternatePort);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mj6B5jcc_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean useLocalHostRequests,
    jboolean useSmallerResponses,
    jboolean disableOfflineCheck) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->ConfigureNetworkQualityEstimatorForTesting(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      useLocalHostRequests,
      useSmallerResponses,
      disableOfflineCheck);
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUrlRequestContext_CreateRequestContextAdapter(
    JNIEnv* env,
    jlong urlRequestContextConfig);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MM9GSMn8(
    JNIEnv* env,
    jclass jcaller,
    jlong urlRequestContextConfig) {
  auto _ret = JNI_CronetUrlRequestContext_CreateRequestContextAdapter(
      env,
      urlRequestContextConfig);
  return _ret;
}

// Forward declaration. To be implemented by the including .cc file.
static jlong JNI_CronetUrlRequestContext_CreateRequestContextConfig(
    JNIEnv* env,
    const jni_zero::JavaParamRef<jbyteArray>& serializedRequestContextConfigOptions);

JNI_ZERO_BOUNDARY_EXPORT jlong Java_android_net_connectivity_J_N_MdJIXtYk(
    JNIEnv* env,
    jclass jcaller,
    jobject serializedRequestContextConfigOptions) {
  auto _ret = JNI_CronetUrlRequestContext_CreateRequestContextConfig(
      env,
      jni_zero::JavaParamRef<jbyteArray>(env, static_cast<jbyteArray>(serializedRequestContextConfigOptions)));
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_M19ulJHr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->Destroy(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MaCWqii6_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->FlushWritePropertiesForTesting(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}

// Forward declaration. To be implemented by the including .cc file.
static jni_zero::ScopedJavaLocalRef<jbyteArray> JNI_CronetUrlRequestContext_GetHistogramDeltas(
    JNIEnv* env);

JNI_ZERO_BOUNDARY_EXPORT jobject Java_android_net_connectivity_J_N_MbrYstV8(
    JNIEnv* env,
    jclass jcaller) {
  auto _ret = JNI_CronetUrlRequestContext_GetHistogramDeltas(env);
  return _ret.ReleaseLocal();
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MA_000240Atjo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->InitRequestContextOnInitThread(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MpnFUGkW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean should) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->ProvideRTTObservations(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      should);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MMi3i5BF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jboolean should) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->ProvideThroughputObservations(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      should);
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_MQxqWopQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject dirPath,
    jboolean logAll,
    jint maxSize) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->StartNetLogToDisk(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(dirPath)),
      logAll,
      maxSize);
}

JNI_ZERO_BOUNDARY_EXPORT jboolean Java_android_net_connectivity_J_N_MnbMPIwt(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller,
    jobject fileName,
    jboolean logAll) {
  auto _ret = reinterpret_cast<CronetContextAdapter*>(nativePtr)->StartNetLogToFile(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller),
      jni_zero::JavaParamRef<jstring>(env, static_cast<jstring>(fileName)),
      logAll);
  return _ret;
}

JNI_ZERO_BOUNDARY_EXPORT void Java_android_net_connectivity_J_N_Mx6Z5XzS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePtr,
    jobject caller) {
  reinterpret_cast<CronetContextAdapter*>(nativePtr)->StopNetLog(
      env,
      jni_zero::JavaParamRef<jobject>(env, caller));
}


// Native to Java functions
static void Java_CronetUrlRequestContext_initNetworkThread(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "initNetworkThread",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}

static void Java_CronetUrlRequestContext_onEffectiveConnectionTypeChanged(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper effectiveConnectionType) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onEffectiveConnectionTypeChanged",
      "(I)V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id(), as_jint(effectiveConnectionType));
}

static void Java_CronetUrlRequestContext_onRTTOrThroughputEstimatesComputed(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper httpRttMs,
    JniIntWrapper transportRttMs,
    JniIntWrapper downstreamThroughputKbps) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onRTTOrThroughputEstimatesComputed",
      "(III)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(httpRttMs),
      as_jint(transportRttMs),
      as_jint(downstreamThroughputKbps));
}

static void Java_CronetUrlRequestContext_onRttObservation(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper rttMs,
    jlong whenMs,
    JniIntWrapper source) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onRttObservation",
      "(IJI)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(rttMs),
      whenMs,
      as_jint(source));
}

static void Java_CronetUrlRequestContext_onThroughputObservation(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj,
    JniIntWrapper throughputKbps,
    jlong whenMs,
    JniIntWrapper source) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "onThroughputObservation",
      "(IJI)V",
      &cached_method_id);
  env->CallVoidMethod(
      obj.obj(),
      call_context.method_id(),
      as_jint(throughputKbps),
      whenMs,
      as_jint(source));
}

static void Java_CronetUrlRequestContext_stopNetLogCompleted(
    JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_INSTANCE>(
      env,
      clazz,
      "stopNetLogCompleted",
      "()V",
      &cached_method_id);
  env->CallVoidMethod(obj.obj(), call_context.method_id());
}



}  // namespace cronet

#endif  // android_net_connectivity_org_chromium_net_impl_CronetUrlRequestContext_JNI
