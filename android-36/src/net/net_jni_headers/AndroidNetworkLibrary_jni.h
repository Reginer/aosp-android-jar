// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     android.net.connectivity.org.chromium.net.AndroidNetworkLibrary

#ifndef android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_JNI
#define android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors
#ifndef android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz_defined
#define android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz_defined
inline jclass android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(JNIEnv* env) {
  static const char kClassName[] = "android.net.connectivity.org.chromium.net.AndroidNetworkLibrary";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


// Native to Java functions
static void Java_AndroidNetworkLibrary_addTestRootCertificate(
    JNIEnv* env,
    const jni_zero::JavaRef<jbyteArray>& rootCert) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<false> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "addTestRootCertificate",
      "([B)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), rootCert.obj());
}

static void Java_AndroidNetworkLibrary_clearTestRootCertificates(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<false> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "clearTestRootCertificates",
      "()V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id());
}

static jni_zero::ScopedJavaLocalRef<jobject> Java_AndroidNetworkLibrary_getCurrentDnsStatus(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getCurrentDnsStatus",
      "()Landroid/net/connectivity/org/chromium/net/DnsStatus;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

static jni_zero::ScopedJavaLocalRef<jobject> Java_AndroidNetworkLibrary_getDnsStatusForNetwork(
    JNIEnv* env,
    jlong networkHandle) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getDnsStatusForNetwork",
      "(J)Landroid/net/connectivity/org/chromium/net/DnsStatus;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id(), networkHandle);
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}

static jboolean Java_AndroidNetworkLibrary_getIsCaptivePortal(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getIsCaptivePortal",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}

static jboolean Java_AndroidNetworkLibrary_getIsRoaming(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getIsRoaming",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}

static jni_zero::ScopedJavaLocalRef<jstring> Java_AndroidNetworkLibrary_getMimeTypeFromExtension(
    JNIEnv* env,
    const jni_zero::JavaRef<jstring>& extension) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getMimeTypeFromExtension",
      "(Ljava/lang/String;)Ljava/lang/String;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id(), extension.obj());
  jstring _ret2 = static_cast<jstring>(_ret);
  return jni_zero::ScopedJavaLocalRef<jstring>(env, _ret2);
}

static jni_zero::ScopedJavaLocalRef<jstring> Java_AndroidNetworkLibrary_getNetworkOperator(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getNetworkOperator",
      "()Ljava/lang/String;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  jstring _ret2 = static_cast<jstring>(_ret);
  return jni_zero::ScopedJavaLocalRef<jstring>(env, _ret2);
}

static jni_zero::ScopedJavaLocalRef<jobjectArray> Java_AndroidNetworkLibrary_getUserAddedRoots(
    JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getUserAddedRoots",
      "()[[B",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  jobjectArray _ret2 = static_cast<jobjectArray>(_ret);
  return jni_zero::ScopedJavaLocalRef<jobjectArray>(env, _ret2);
}

static jni_zero::ScopedJavaLocalRef<jstring> Java_AndroidNetworkLibrary_getWifiSSID(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getWifiSSID",
      "()Ljava/lang/String;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(clazz, call_context.method_id());
  jstring _ret2 = static_cast<jstring>(_ret);
  return jni_zero::ScopedJavaLocalRef<jstring>(env, _ret2);
}

static jint Java_AndroidNetworkLibrary_getWifiSignalLevel(JNIEnv* env, JniIntWrapper countBuckets) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "getWifiSignalLevel",
      "(I)I",
      &cached_method_id);
  auto _ret = env->CallStaticIntMethod(clazz, call_context.method_id(), as_jint(countBuckets));
  return _ret;
}

static jboolean Java_AndroidNetworkLibrary_haveOnlyLoopbackAddresses(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "haveOnlyLoopbackAddresses",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}

static jboolean Java_AndroidNetworkLibrary_isCleartextPermitted(
    JNIEnv* env,
    const jni_zero::JavaRef<jstring>& host) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "isCleartextPermitted",
      "(Ljava/lang/String;)Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id(), host.obj());
  return _ret;
}

static jboolean Java_AndroidNetworkLibrary_reportBadDefaultNetwork(JNIEnv* env) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, false);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "reportBadDefaultNetwork",
      "()Z",
      &cached_method_id);
  auto _ret = env->CallStaticBooleanMethod(clazz, call_context.method_id());
  return _ret;
}

static void Java_AndroidNetworkLibrary_setWifiEnabledForTesting(JNIEnv* env, jboolean enabled) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "setWifiEnabledForTesting",
      "(Z)V",
      &cached_method_id);
  env->CallStaticVoidMethod(clazz, call_context.method_id(), enabled);
}

static void Java_AndroidNetworkLibrary_tagSocket(
    JNIEnv* env,
    JniIntWrapper ifd,
    JniIntWrapper uid,
    JniIntWrapper tag) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "tagSocket",
      "(III)V",
      &cached_method_id);
  env->CallStaticVoidMethod(
      clazz,
      call_context.method_id(),
      as_jint(ifd),
      as_jint(uid),
      as_jint(tag));
}

static jni_zero::ScopedJavaLocalRef<jobject> Java_AndroidNetworkLibrary_verifyServerCertificates(
    JNIEnv* env,
    const jni_zero::JavaRef<jobjectArray>& certChain,
    const jni_zero::JavaRef<jstring>& authType,
    const jni_zero::JavaRef<jstring>& host) {
  static std::atomic<jmethodID> cached_method_id(nullptr);
  jclass clazz = android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);
  jni_zero::internal::JniJavaCallContext<true> call_context;
  call_context.Init<jni_zero::MethodID::TYPE_STATIC>(
      env,
      clazz,
      "verifyServerCertificates",
      "([[BLjava/lang/String;Ljava/lang/String;)Landroid/net/connectivity/org/chromium/net/AndroidCertVerifyResult;",
      &cached_method_id);
  auto _ret = env->CallStaticObjectMethod(
      clazz,
      call_context.method_id(),
      certChain.obj(),
      authType.obj(),
      host.obj());
  return jni_zero::ScopedJavaLocalRef<jobject>(env, _ret);
}



#endif  // android_net_connectivity_org_chromium_net_AndroidNetworkLibrary_JNI
